<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alvis.exam.repository.TestMapper">
  <resultMap id="BaseResultMap" type="com.alvis.exam.domain.Test">
    <id column="test_id" jdbcType="VARCHAR" property="testId" />
    <result column="test_title" jdbcType="VARCHAR" property="testTitle" />
    <result column="test_status" jdbcType="INTEGER" property="testStatus" />
    <result column="test_type" jdbcType="INTEGER" property="testType" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.alvis.exam.domain.Test">
    <result column="test_context" jdbcType="LONGVARCHAR" property="testContext" />
  </resultMap>
  <sql id="Base_Column_List">
    test_id, test_title, test_status, test_type
  </sql>
  <sql id="Blob_Column_List">
    test_context
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_test
    where test_id = #{testId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from tb_test
    where test_id = #{testId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.alvis.exam.domain.Test">
    insert into tb_test (test_id, test_title, test_status, 
      test_type, test_context)
    values (#{testId,jdbcType=VARCHAR}, #{testTitle,jdbcType=VARCHAR}, #{testStatus,jdbcType=INTEGER}, 
      #{testType,jdbcType=INTEGER}, #{testContext,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.alvis.exam.domain.Test">
    insert into tb_test
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="testId != null">
        test_id,
      </if>
      <if test="testTitle != null">
        test_title,
      </if>
      <if test="testStatus != null">
        test_status,
      </if>
      <if test="testType != null">
        test_type,
      </if>
      <if test="testContext != null">
        test_context,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="testId != null">
        #{testId,jdbcType=VARCHAR},
      </if>
      <if test="testTitle != null">
        #{testTitle,jdbcType=VARCHAR},
      </if>
      <if test="testStatus != null">
        #{testStatus,jdbcType=INTEGER},
      </if>
      <if test="testType != null">
        #{testType,jdbcType=INTEGER},
      </if>
      <if test="testContext != null">
        #{testContext,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.alvis.exam.domain.Test">
    update tb_test
    <set>
      <if test="testTitle != null">
        test_title = #{testTitle,jdbcType=VARCHAR},
      </if>
      <if test="testStatus != null">
        test_status = #{testStatus,jdbcType=INTEGER},
      </if>
      <if test="testType != null">
        test_type = #{testType,jdbcType=INTEGER},
      </if>
      <if test="testContext != null">
        test_context = #{testContext,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where test_id = #{testId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.alvis.exam.domain.Test">
    update tb_test
    set test_title = #{testTitle,jdbcType=VARCHAR},
      test_status = #{testStatus,jdbcType=INTEGER},
      test_type = #{testType,jdbcType=INTEGER},
      test_context = #{testContext,jdbcType=LONGVARCHAR}
    where test_id = #{testId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.alvis.exam.domain.Test">
    update tb_test
    set test_title = #{testTitle,jdbcType=VARCHAR},
      test_status = #{testStatus,jdbcType=INTEGER},
      test_type = #{testType,jdbcType=INTEGER}
    where test_id = #{testId,jdbcType=VARCHAR}
  </update>
</mapper>